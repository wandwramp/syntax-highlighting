<?xml version="1.0" encoding="UTF-8"?>
<!--
  Author: Daniel Oosterwijk
  Date:   2019-03-12
  Version:   1.1
  WRAMP Assembly spec

  Copyright (C) 2019 The University of Waikato, Hamilton, New Zealand.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>
-->
<language id="wramp" name="WRAMP" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/wramp;application/wramp</property>
    <property name="globs">*.s;*.S</property>
    <property name="line-comment-start">#</property>
  </metadata>
  <styles>
    <style id="keyword"             name="Keyword"                map-to="def:keyword"/>
    <style id="comment"             name="Comment"                map-to="def:comment"/>
    <style id="string"              name="String"                 map-to="def:string"/>
    <style id="escape"              name="Escape Character"       map-to="def:special-char"/>
    <style id="number"              name="Number"                 map-to="def:constant"/>
    <style id="label"               name="Label"                  map-to="def:identifier"/>
    <style id="segment"             name="Segment"                map-to="def:preprocessor"/>
    <style id="directive"           name="Assembler Directive"    map-to="def:statement"/>
    <style id="instruction"         name="Instruction"            map-to="def:type"/>
    <style id="illegal"		        name="Illegal Construct"      map-to="def:error"/>
    <!-- Not mapped to any style, will have default text colouring -->
    <style id="register"            name="Register"/>
  </styles>
  <definitions>
    <context id="wramp">
      <include>
        <context id="comment" style-ref="comment">
          <match>#.*</match>
        </context>
        <context id="string" end-at-line-end="true" style-ref="string">
          <start>"</start>
          <end>"</end>
          <include>
            <context id="string-escape" style-ref="escape">
              <match>\\([rnta\\'"]|0[0-9]*)</match>
            </context>
			<context id="string-unknown-escape" style-ref="illegal">
			  <match>\\.</match>
			</context>
          </include>
        </context>
        <context id="char" end-at-line-end="true" style-ref="string">
          <start>'</start>
          <end>'</end>
          <include>
            <context id="char-escape" style-ref="escape">
              <match>\\([rnta\\'"]|0[0-9]*)</match>
            </context>
			<context id="char-unknown-escape" style-ref="illegal">
			  <match>\\.</match>
			</context>
          </include>
        </context>
        <context id="instruction-arith" style-ref="instruction">
          <match>((add|sub|mult|div|rem)u?i?|lhi|la)\s</match>
        </context>
        <context id="instruction-bitwise" style-ref="instruction">
		  <match>(and|or|xor|sll|sra|srl)i?\s</match>
        </context>
        <context id="instruction-test" style-ref="instruction">
		  <match>(slt|sgt|sle|sge|seq|sne)u?i?\s</match>
        </context>
        <context id="instruction-branchJ" style-ref="instruction">
		  <match>j(al)?r?\s</match>
        </context>
        <context id="instruction-branchRelative" style-ref="instruction">
		  <match>b(eq|ne)z\s</match>
        </context>
        <context id="instruction-memory" style-ref="instruction">
		  <match>[ls]w\s</match>
        </context>
        <context id="instruction-special" style-ref="instruction">
          <match>(break|syscall)</match>
        </context>
        <context id="instruction-specialProtected" style-ref="instruction">
          <match>mov(gs|sg)\s</match>
        </context>
        <context id="instruction-specialProtectedRfe" style-ref="instruction">
          <match>rfe</match>
        </context>
        <context id="general-register" style-ref="register">
          <match>\$(1[0-5]|\d|sp|ra)</match>
        </context>
        <context id="special-register" style-ref="register">
          <match>\$(cctrl|estat|icount|ccount|evec|ear|esp|ers)</match>
        </context>
        <context id="segment" style-ref="segment">
          <match>\.(text|data|bss)</match>
        </context>
        <context id="directive-string" style-ref="directive">
          <match>\.asciiz?</match>
        </context>
        <context id="directive-space" style-ref="directive">
          <match>\.(word|space)</match>
        </context>
        <context id="directive-global" style-ref="directive">
          <match>\.global [a-zA-Z_][a-zA-Z0-9_]*</match>
        </context>
        <context id="directive-equ" style-ref="directive">
          <match>\.equ</match>
        </context>
        <context id="label" style-ref="label">
          <match>[a-zA-Z_][a-zA-Z0-9_]*:?</match>
        </context>
        <context id="number-hex" style-ref="number">
          <match>0x[0-9a-fA-F]+</match>
        </context>
        <context id="number-decimal" style-ref="number">
          <match>[+-]?\d+</match>
        </context>
      </include>
    </context>
  </definitions>
</language>
<!--vim: set ft=xml:-->

